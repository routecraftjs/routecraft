---
description: "Operations DSL: RouteCraft steps mapped to Apache Camel EIPs"
globs:
  [
    "packages/routecraft/src/operations/**/*",
    "packages/routecraft/src/*.ts",
    "examples/**/*",
    "packages/routecraft/test/**/*",
  ]
alwaysApply: false
---

## Operations (DSL) guidelines and Camel mapping

This document maps RouteCraft operations to Apache Camel Enterprise Integration Patterns (EIPs) where applicable, and sets guidelines for authoring steps. Prefer Camel-like naming and behavior when uncertain. Refer to the docs under `apps/routecraft.dev/src/app/docs/reference/operations/page.md` for endâ€‘user documentation.

### RouteCraft operations (from source)

- `.from(source)`
  - Camel: From (endpoint consumer)
  - Notes: A route must start with a single source. Use `[ { id }, source ]` form to set a stable route ID.

- `.process(adapter | (exchange) => exchange)`
  - Camel: Processor
  - Notes: Can change headers and body; return a new or modified exchange. Prefer pure transformations here; avoid side effects.

- `.transform(adapter | (body) => newBody)`
  - Camel: Transform / Message Translator
  - Notes: Body-only change. Framework writes result back to `exchange.body`.

{% badge %}implemented{% /badge %} `.map((body) => newBody)`

- Camel: Transform (functional shortcut)
- Notes: Thin wrapper over transform semantics for convenience.

- `.tap(adapter | (exchange) => void)`
  - Camel: Wire Tap (lightweight)
  - Notes: Observe without mutating; no side effects that change downstream. Use for logging/metrics.

- `.filter(adapter | (exchange) => boolean)`
  - Camel: Filter
  - Notes: Rejects the exchange when predicate is false. Downstream steps will not run for rejected messages.

- `.validate(adapter | (exchange) => asserts)`
  - Camel: Validate
  - Notes: Throw or reject on schema violations; prefer schema libs (e.g., Zod) inside the validator.

- `.split(adapter | (exchange) => Exchange[])`
  - Camel: Splitter
  - Notes: Fan-out into multiple exchanges; framework maintains `routecraft.split_hierarchy` headers for aggregation.

- `.aggregate(adapter | (exchanges) => Exchange)`
  - Camel: Aggregator
  - Notes: Fan-in of split groups; ensure deterministic aggregation.

- `.enrich(adapter | (exchange) => Partial<Exchange["body"]>)`
  - Camel: Content Enricher
  - Notes: Merge additional data into the message; default aggregator provided in core.

- `.to(destination)`
  - Camel: To (endpoint producer)
  - Notes: Side effects/output only. Keep idempotency and error surfacing clear.

### Authoring guidelines

- One function per step; prefer small, composable operations.
- Pure where possible: `.transform`, `.process`, `.filter`, `.tap`.
- Validate external inputs at boundaries with `.validate`.
- Use `.split`/`.aggregate` for fan-out/fan-in; avoid manual loops inside processors.
- Side effects belong in `.to(...)` destinations, not in processors/transformers.

### Which to use when (quick guide)

- Use `.transform` for body-only pure mapping. Metadata unchanged.
- Use `.process` to replace or reshape the entire exchange (change body and/or headers). Avoid IO here.
- Use `.to` for side effects/output (DB writes, HTTP emits, queues). Message continues unchanged.
- Use `.enrich` to fetch/compute extra data and merge it via aggregator.

### Header semantics

- Track operation in `routecraft.operation` header.
- Maintain correlation via `routecraft.correlation_id`.
- Preserve split lineage in `routecraft.split_hierarchy` for fan-in.
  - Timer sources set timer headers (`routecraft.timer.*`). See `packages/routecraft/src/adapters/timer.ts`.

### Testing guidance

- Prefer integration-style examples under `examples/*` to exercise step behavior end-to-end.
- For engine invariants (split/aggregate, headers, filtering), add/extend tests in `packages/routecraft/test/**/*`.
- Use deterministic inputs and assert on headers/body after each operation where meaningful.
