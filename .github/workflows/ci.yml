name: CI

on:
  workflow_dispatch:
  push:
    branches: ["main"]
    paths-ignore:
      - "**.md"
      - "docs/**"
      - ".github/ISSUE_TEMPLATE/**"
  pull_request_target:
    branches: ["main"]
    paths-ignore:
      - "**.md"
      - "docs/**"
      - ".github/ISSUE_TEMPLATE/**"
  release:
    types: [created]

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event_name == 'pull_request_target' && github.event.pull_request.head.sha || github.sha }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Use Node.js from .nvmrc
        uses: actions/setup-node@v5
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"

      - name: Checkout PR branch for lockfile update
        if: ${{ github.event_name == 'pull_request_target' && github.actor == 'dependabot[bot]' }}
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Update lockfile
        if: ${{ github.event_name == 'pull_request_target' && github.actor == 'dependabot[bot]' }}
        run: |
          pnpm install --lockfile-only --no-frozen-lockfile

      - name: Commit lockfile changes
        if: ${{ github.event_name == 'pull_request_target' && github.actor == 'dependabot[bot]' }}
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add pnpm-lock.yaml
          if git diff --cached --quiet; then
            echo "No lockfile changes needed"
          else
            git commit --amend --no-edit
            git push --force-with-lease
          fi

      - name: Install dependencies
        run: |
          if [ "${{ github.actor }}" = "dependabot[bot]" ]; then
            pnpm install --no-frozen-lockfile
          else
            pnpm install --frozen-lockfile
          fi

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

  validate:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event_name == 'pull_request_target' && github.event.pull_request.head.sha || github.sha }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Use Node.js from .nvmrc
        uses: actions/setup-node@v5
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"

      - name: Restore node_modules
        uses: actions/cache@v4
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Run checks
        run: |
          pnpm run format
          pnpm run typecheck
          pnpm run lint
          pnpm exec madge --circular .

  test:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event_name == 'pull_request_target' && github.event.pull_request.head.sha || github.sha }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Use Node.js from .nvmrc
        uses: actions/setup-node@v5
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"

      - name: Restore node_modules
        uses: actions/cache@v4
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Run tests
        run: pnpm test:coverage

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          if-no-files-found: error

  build:
    needs: [setup]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event_name == 'pull_request_target' && github.event.pull_request.head.sha || github.sha }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Use Node.js from .nvmrc
        uses: actions/setup-node@v5
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"

      - name: Restore node_modules
        uses: actions/cache@v4
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Build packages
        run: pnpm run build

      - name: Check bundle size
        run: pnpm run limit:size

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: "**/dist"
          key: build-${{ github.sha }}

  cli-test:
    needs: [validate, test, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event_name == 'pull_request_target' && github.event.pull_request.head.sha || github.sha }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Use Node.js from .nvmrc
        uses: actions/setup-node@v5
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"

      - name: Restore node_modules
        uses: actions/cache@v4
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Restore build artifacts
        uses: actions/cache@v4
        with:
          path: "**/dist"
          key: build-${{ github.sha }}

      - name: Install CLI globally
        working-directory: ./packages/cli
        run: |
          pnpm link --global
          craft --version

      - name: Run all examples
        working-directory: ./examples
        run: craft run hello-world.mjs

  approve:
    name: approve
    runs-on: ubuntu-latest
    needs: [cli-test]
    if: github.event_name == 'pull_request_target' && github.actor == 'dependabot[bot]' && success()
    permissions:
      pull-requests: write
    steps:
      - name: Approve PR
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              event: 'APPROVE'
            })

  merge:
    name: merge
    runs-on: ubuntu-latest
    needs: [approve]
    if: github.event_name == 'pull_request_target' && github.actor == 'dependabot[bot]' && success()
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Merge PR
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              merge_method: 'squash'
            })

  publish:
    needs: [build, cli-test]
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v5

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Use Node.js from .nvmrc
        uses: actions/setup-node@v5
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"

      - name: Restore node_modules
        uses: actions/cache@v4
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Check package version
        run: |
          PKG_VERSION=$(node -p "require('./package.json').version")
          RELEASE_VERSION=${GITHUB_REF#refs/tags/v}
          if [ "$PKG_VERSION" != "$RELEASE_VERSION" ]; then
            echo "Package version ($PKG_VERSION) does not match release version ($RELEASE_VERSION)"
            exit 1
          fi
          pnpm -r exec -- pnpm version $RELEASE_VERSION --no-git-tag-version

      - name: Build packages
        run: pnpm run build

      - name: Publish package
        run: pnpm publish --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
